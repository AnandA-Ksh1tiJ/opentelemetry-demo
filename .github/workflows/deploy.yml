name: CI/CD Pipeline for OpenTelemetry Demo

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_SHA: ${{ github.sha }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Authenticate Docker with AWS ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

    - name: Verify Docker Login
      run: docker info

    - name: Build and Push Docker Image with Docker Compose
      run: |
        TAG=$GITHUB_SHA docker-compose build
        TAG=$GITHUB_SHA docker-compose push

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    env:
      GITHUB_SHA: ${{ github.sha }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up kubectl
      uses: eks-actions/eks-kubectl-action@v1
      with:
        cluster-name: otel-demo-cluster
        region: us-east-1
        kubeconfig: ${{ secrets.KUBECONFIG }}

    - name: Deploy to EKS
      run: |
        kubectl apply -f deployment.yaml
        kubectl set image deployment/otel-demo-app otel-demo-app=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/otel-demo-repo:$GITHUB_SHA
        kubectl rollout status deployment/otel-demo-app

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy
    steps:
    - name: Rollback to previous stable version
      run: |
        kubectl rollout undo deployment/otel-demo-app
